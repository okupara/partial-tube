scalar Date

type User {
  id: ID!
  name: String!
  status: String!
}

type PartialVideo {
  id: ID!
  start: Float!
  end: Float!
  comment: String
  title: String!
  videoId: String!
  playlists: [Playlist!]!
  created: Date!
}
input VideoInput {
  id: String
  videoId: String!
  title: String!
  start: Float!
  end: Float!
  comment: String
  playlists: [String!]
}

type Playlist {
  id: ID!
  numOfVideos: Int!
  name: String!
  comment: String
  permission: String!
  created: Date!
  totalSec: Float!
  firstVideoId: String
  videos: [PartialVideo]!
}

input PlaylistInput {
  name: String!
  permission: String!
  comment: String
}

type YouTubeVideo {
  id: ID!
  title: String!
  description: String
}

type Query {
  viewer: User!
  playlist(id: String!): Playlist
  playlists: [Playlist]
  youtubeVideo(videoId: String!): YouTubeVideo
  videos: [PartialVideo!]
  video(id: String!): PartialVideo
}

type Mutation {
  addPlaylist(playlist: PlaylistInput): Playlist
  video(video: VideoInput): PartialVideo
  deleteVideo(id: ID!): String!
  deletePlaylist(id: ID!): String!
  deleteVideoFromPlaylist(playlistId: ID!, videoId: ID!): String!
}
